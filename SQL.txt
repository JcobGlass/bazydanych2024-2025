ZAD 1:
CREATE TABLE postacie(id_postaci INTEGER primary key AUTO_INCREMENT, nazwa VARCHAR(40), rodzaj ENUM('wiking' , 'ptak' , 'kobieta'), data_ur DATE, wiek INTEGER UNSIGNED);
INSERT INTO postacie(nazwa, rodzaj, data_ur, wiek)
    -> VALUES ('Bjorn', 'wiking', '1980-05-14', 44),
    -> ('Drozd', 'ptak', '2020-06-01', 4),
    -> ('Tesciowa', 'kobieta', '1936-10-01', 87);
UPDATE postacie SET wiek = 88 WHERE nazwa = 'Tesciowa';
zad 2:
CREATE TABLE walizka(id_walizki INTEGER primary key AUTO_INCREMENT, pojemnosc INTEGER UNSIGNED, kolor ENUM('rozowy', 'czerwony', 'teczowy', 'zolty'), id_wlasciciela INTEGER,  FOREIGN KEY(id_wlasciciela) REFERENCES postacie(id_post
aci) ON DELETE CASCADE);
ALTER TABLE walizka ALTER COLUMN kolor  SET DEFAULT 'rozowy';
INSERT INTO walizka(id_walizki, pojemnosc, kolor, id_wlasciciela) VALUES (1, 50, 'rozowy', 1)
INSERT INTO walizka(id_walizki, pojemnosc, kolor, id_wlasciciela) VALUES (2, 70, 'zolty', 2)
zad 3:
CREATE TABLE izba(adres_budynku VARCHAR(50) , nazwa_izby VARCHAR(50), metraz INTEGER UNSIGNED, wlasciciel INTEGER, FOREIGN KEY(wlasciciel) REFERENCES postacie(id_postaci) ON DELETE SET NULL, PRIMARY KEY(adres_budynku, nazwa_izby));
zad 3.2:
ALTER TABLE izba ADD kolor_izby VARCHAR(40) DEFAULT 'czarny' AFTER metraz;
zad 3.3:
INSERT INTO izba(adres_budynku, nazwa_izby, metraz , wlasciciel) VALUES (1, 'spizarnia', '25', 'Bjorn');
zad 4.1:
CREATE TABLE przetwory(id_przetworu INT PRIMARY KEY, rok_produkcji INT DEFAULT 1654, id_wykonawcy INT, zawartosc VARCHAR(50), dodatek VARCHAR(50) DEFAULT 'papryczka chili',FOREIGN KEY (id_wykonawcy) REFERENCES postacie(id_postaci), FOREIGN KEY(id_konsumenta) REFERENCES postacie(id_postaci)
zad 4.2:
INSERT INTO przetwory(zawartosc, dodatek)
VALUES('bigos', 'papryczka chili');
zad 5.1:
INSERT INTO postacie(nazwa, rodzaj, data_ur, wiek)
    -> VALUES ('Bergman', 'wiking', '1980-05-14', 24),
    -> ('Bergman', 'wiking', '1981-02-11', 22),
    -> ('Bergman', 'wiking', '1984-05-13', 21),
       ('Bergman', 'wiking', '1981-04-15', 26),
       ('Bergman', 'wiking', '1984-03-17', 23),
zad 5.2:
CREATE TABLE statek(nazwa_statku INT PRIMARY KEY, rodzaj_statku ENUM('okret','zaglowka','Wycieczkowiec', data_wodowania DATE, max_ladownosc INT UNSIGNED );
ZAD 5.3:
INSERT INTO statek(nazwa_statku, rodzaj_statku, data_wodowania, max_ladownosc)
VALUES('Piernik','okret','1970-05-21',777),
('Titanic','okret','1918-12-12',1200);
ZAD 5.4:
ALTER TABLE postacie ADD funkcja VARCHAR(50);
ZAD 5.5:
UPDATE postacie SET funkcja ='kapitan' WHERE nazwa='Bjorn';
ZAD 5.6:
FOREIGN KEY postacie(id_postaci) REFERENCES statek(nazwa_statku);
zad 5.7:
DELETE FROM izba WHERE nazwa='spizarnia';
zad 5.8:
DROP TABLE izba;
ZAD 1:
DELETE FROM postac
WHERE funkcja = 'wiking' 
  AND imie != 'Bjorn'
  AND data_urodzenia IN (
      SELECT data_urodzenia
      FROM postac
      WHERE funkcja = 'wiking'
      ORDER BY data_urodzenia ASC
      LIMIT 2);
ZAD 1b:
ALTER TABLE postac
DROP FOREIGN KEY fk_statek;
ALTER TABLE postac
DROP PRIMARY KEY;
ZAD 2.1:
ALTER TABLE postacie ADD pesel VARCHAR(11) PRIMARY KEY;
ZAD 2.2:
ALTER TABLE postacie MODIFY COLUMN rodzaj ENUM('wiking','ptak','kobieta','syrena');
ZAD 2.3:
INSERT INTO postacie(nazwa,rodzaj)
VALUES('Gertruda Nieszczera','syrena');
ZAD 3.1:
UPDATE statek SET nazwa_statku ='Bjorn' WHERE imie LIKE '%a%'
ZAD 3.2:
UPDATE statek
SET max_ladownosc = max_ladownosc * 0.7
WHERE YEAR(data_wodowania) BETWEEN 1901 AND 2000;
zad 3.3:
UPDATE postac
SET funkcja ='wiking'
WHERE TIMESTAMPDIFF(YEAR, data_urodzenia, CURDATE())<= 1000;
ZAD 4.1:
INSERT INTO postac (imie, funkcja, nazwa_statku)
VALUES ('Loko', 'wąż', NULL);
zad 4.2:
CREATE TABLE Marynarz AS
SELECT * 
FROM postacie 
WHERE nazwa_statku IS NOT NULL;
zad 4.3:
ALTER TABLE Marynarz
ADD CONSTRAINT fk_nazwa_statku FOREIGN KEY (nazwa_statku)
REFERENCES statek(nazwa_statku)
ON DELETE CASCADE 
ON UPDATE CASCADE; 
zad 5.1:
DELETE FROM statek;
zad 5.2:
DELETE FROM postac
WHERE funkcja = 'wiking' 
   data_urodzenia IN (
   SELECT data_urodzenia
   FROM postac
   WHERE funkcja = 'wiking';
zad 5.4:
DROP statek;
zad 5.5:
CREATE TABLE zwierzaki AS
SELECT nazwa, rodzaj, data_ur, wiek
FROM postacie
WHERE typ ='ptak';
zad 6.1:
CREATE TABLE szklarskij.kreatura
SELECT * FROM wikingowie.kreatura;
INSERT INTO szklarskij.kreatura
SELECT * FROM wikingowie.kreatura;
CREATE TABLE szklarskij.zasob
SELECT * FROM wikingowie.zasob;
INSERT INTO szklarskij.zasob
SELECT * FROM wikingowie.zasob;
CREATE TABLE szklarskij.ekwipunek
SELECT * FROM wikingowie.ekwipunek;
INSERT INTO szklarskij.ekwipunek    
SELECT * FROM wikingowie.ekwipunek;
zad 6.2:
SELECT* FROM zasob;
zad 6.3:
SELECT* FROM zasob WHERE typ='jedzenie';
zad 6.4:
SELECT idZasobu, ilosc
FROM zasob
WHERE id IN (1, 3, 5);
zad 7.1:
SELECT *
FROM kreatura
WHERE typ != 'wiedźma'
AND waga >= 50;
zad 7.2:
SELECT * FROM zasob
WHERE waga >=2 AND waga<=5;
zad 7.3:
SELECT* FROM kreatura
WHERE nazwa LIKE "%or%"
AND waga >=30 AND waga <=70;
ZAD 8.1:
SELECT* FROM zasob
WHERE miesiac="lipiec" OR miesiac="sierpien";
zad 8.2:
SELECT* FROM zasob
ORDER BY rodzaj, waga;
zad 8.3:
SELECT* FROM kreatura
ORDER BY data_urodzenia ASC LIMIT 5;
zad 9.1:
SELECT DISTINCT rodzaj FROM zasob;
zad 9.2:
SELECT CONCAT(nazwa, ' - ', rodzaj) AS nazwa_rodzaj FROM kreatura
WHERE rodzaj LIKE 'wi%';
zad 9.3:
SELECT rodzaj, (ilosc * waga) AS calkowita_waga FROM zasob
WHERE rok_pozyskania BETWEEN 2000 AND 2007;
zad 10.1:
SELECT AVG(waga) as srednia_waga FROM wikingowie;
zad 10.2:
SELECT rodzaj,AVG(waga) AS srednia_waga, COUNT(*) AS liczba_kreatur
FROM Wikingowie
GROUP BY rodzaj;
zad 10.3:
SELECT rodzaj, AVG(wiek) AS sredni_wiek FROM wikingowie ORDER BY rodzaj;
zad 11.1:
SELECT rodzaj, SUM(waga) AS suma_wagi_zasobu FROM zasoby;
zad 11.2:
SELECT nazwa, AVG(waga) AS srednia_waga FROM zasoby HAVING COUNT(*) >=4 AND SUM(waga) >10;
zad 11.3:
SELECT nazwa FROM zasoby HAVING MIN(id_zasobu) >1;
zad 12.1:
CREATE TABLE szklarskij.kreatura2;
INSERT INTO szklarskij.kreatura2 SELECT* FROM wikingowie.kreatura;
INSERT INTO kreatura2.uczestnicy
SELECT * FROM wikingowie.uczestnicy;
INSERT INTO kreatura2.etapy_wyprawy
SELECT * FROM wikingowie.etapy_wyprawy;
INSERT INTO kreatura2.sektor
SELECT * FROM wikingowie.sektor;
INSERT INTO kreatura2.wyprawa
SELECT * FROM wikingowie.wyprawa;
zad 12.2:
SELECT nazwa
FROM kreatura2
WHERE id_kreatury NOT IN (SELECT id_kreatury FROM wyprawa);
zad 12.3:
SELECT w.nazwa,SUM(s.ilosc) AS suma_ekwipunku
FROM wyprawa w
JOIN uczestnicy u ON w.id_wyprawy = u.id_wyprawy
JOIN sektor s ON u.id_kreatury = s.id_kreatury
GROUP BY w.id_wyprawy, w.nazwa;
zad 13.1:
SELECT w.nazwa,COUNT(u.id_kreatury) AS liczba_uczestnikow,
GROUP_CONCAT(k.nazwa SEPARATOR ', ') AS uczestnicy
FROM wyprawa w
JOIN uczestnicy u ON w.id_wyprawy = u.id_wyprawy
JOIN kreatura k ON u.id_kreatury = k.id_kreatury
GROUP BY w.id_wyprawy, w.nazwa;
zad 13.2:
SELECT w.nazwa_wyprawy,e.numer_etapu,e.data_poczatku_etapu,s.nazwa_sektora,k.nazwa_kreatury AS kierownik
FROM wyprawa w
JOIN etapy_wyprawy e ON w.id_wyprawy = e.id_wyprawy
JOIN sektor s ON e.id_etapu = s.id_etapu
JOIN kierownik k ON w.id_wyprawy = k.id_wyprawy
JOIN kreatura kr ON k.id_kreatury = kr.id_kreatury
ORDER BY w.data, e.numer;
zad 14.1:
SELECT s.nazwa, COUNT(e.id_etapu) AS ilosc_odwiedzin
FROM sektor s
LEFT JOIN etapy_wyprawy e ON s.id_etapu = e.id_etapu
GROUP BY s.id_sektora, s.nazwa
ORDER BY ilosc_odwiedzin DESC;
zad 14.2:
SELECT k.nazwa,
IFNULL(CASE WHEN COUNT(u.id_wyprawy) > 0 THEN 'brał udział w wyprawie'
ELSE 'nie brał udziału w wyprawie' END, 'nie brał udziału w wyprawie') AS udzial_w_wyprawach
FROM kreatura k
LEFT JOIN uczestnicy u ON k.id_kreatury = u.id_kreatury
GROUP BY k.id_kreatury, k.nazwa;
zad 15.1:
SELECT w.nazwa_wyprawy,SUM(CHAR_LENGTH(d.tekst)) AS suma_znakow
FROM wyprawa w
JOIN dziennik d ON w.id_wyprawy = d.id_wyprawy
GROUP BY w.id_wyprawy, w.nazwa
HAVING suma_znakow < 400;
zad 15.2:
SELECT w.nazwa_wyprawy,AVG(z.waga) AS srednia_waga_zasobow
FROM wyprawa w
JOIN uczestnicy u ON w.id_wyprawy = u.id_wyprawy
JOIN zasoby z ON u.id_uczestnika = z.id_uczestnika
GROUP BY w.id_wyprawy, w.nazwa;
zad 16.1:
SELECT k.nazwa_kreatury,DATEDIFF(w.data_poczatku, k.data_urodzenia) AS wiek_w_dniach
FROM kreatura k
JOIN uczestnicy u ON k.id_kreatury = u.id_kreatury
JOIN wyprawa w ON u.id_wyprawy = w.id_wyprawy
JOIN etapy_wyprawy e ON w.id_wyprawy = e.id_wyprawy
JOIN sektor s ON e.id_etapu = s.id_etapu
WHERE s.nazwa = 'Chatka Dziadka';
